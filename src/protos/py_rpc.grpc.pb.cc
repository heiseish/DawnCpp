// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: py_rpc.proto

#include "py_rpc.pb.h"
#include "py_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace PyRPC {

static const char* PyRPCService_method_names[] = {
  "/PyRPC.PyRPCService/TextToSpeech",
  "/PyRPC.PyRPCService/RespondToText",
};

std::unique_ptr< PyRPCService::Stub> PyRPCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PyRPCService::Stub> stub(new PyRPCService::Stub(channel));
  return stub;
}

PyRPCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_TextToSpeech_(PyRPCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RespondToText_(PyRPCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PyRPCService::Stub::TextToSpeech(::grpc::ClientContext* context, const ::PyRPC::TTSInput& request, ::PyRPC::TTSOutput* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TextToSpeech_, context, request, response);
}

void PyRPCService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::PyRPC::TTSInput* request, ::PyRPC::TTSOutput* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, std::move(f));
}

void PyRPCService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PyRPC::TTSOutput* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, std::move(f));
}

void PyRPCService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::PyRPC::TTSInput* request, ::PyRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, reactor);
}

void PyRPCService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PyRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PyRPC::TTSOutput>* PyRPCService::Stub::AsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::PyRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PyRPC::TTSOutput>::Create(channel_.get(), cq, rpcmethod_TextToSpeech_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PyRPC::TTSOutput>* PyRPCService::Stub::PrepareAsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::PyRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PyRPC::TTSOutput>::Create(channel_.get(), cq, rpcmethod_TextToSpeech_, context, request, false);
}

::grpc::Status PyRPCService::Stub::RespondToText(::grpc::ClientContext* context, const ::PyRPC::ConversationInput& request, ::PyRPC::ConversationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RespondToText_, context, request, response);
}

void PyRPCService::Stub::experimental_async::RespondToText(::grpc::ClientContext* context, const ::PyRPC::ConversationInput* request, ::PyRPC::ConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RespondToText_, context, request, response, std::move(f));
}

void PyRPCService::Stub::experimental_async::RespondToText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PyRPC::ConversationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RespondToText_, context, request, response, std::move(f));
}

void PyRPCService::Stub::experimental_async::RespondToText(::grpc::ClientContext* context, const ::PyRPC::ConversationInput* request, ::PyRPC::ConversationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RespondToText_, context, request, response, reactor);
}

void PyRPCService::Stub::experimental_async::RespondToText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PyRPC::ConversationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RespondToText_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PyRPC::ConversationResponse>* PyRPCService::Stub::AsyncRespondToTextRaw(::grpc::ClientContext* context, const ::PyRPC::ConversationInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PyRPC::ConversationResponse>::Create(channel_.get(), cq, rpcmethod_RespondToText_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PyRPC::ConversationResponse>* PyRPCService::Stub::PrepareAsyncRespondToTextRaw(::grpc::ClientContext* context, const ::PyRPC::ConversationInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PyRPC::ConversationResponse>::Create(channel_.get(), cq, rpcmethod_RespondToText_, context, request, false);
}

PyRPCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PyRPCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PyRPCService::Service, ::PyRPC::TTSInput, ::PyRPC::TTSOutput>(
          [](PyRPCService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PyRPC::TTSInput* req,
             ::PyRPC::TTSOutput* resp) {
               return service->TextToSpeech(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PyRPCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PyRPCService::Service, ::PyRPC::ConversationInput, ::PyRPC::ConversationResponse>(
          [](PyRPCService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::PyRPC::ConversationInput* req,
             ::PyRPC::ConversationResponse* resp) {
               return service->RespondToText(ctx, req, resp);
             }, this)));
}

PyRPCService::Service::~Service() {
}

::grpc::Status PyRPCService::Service::TextToSpeech(::grpc::ServerContext* context, const ::PyRPC::TTSInput* request, ::PyRPC::TTSOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PyRPCService::Service::RespondToText(::grpc::ServerContext* context, const ::PyRPC::ConversationInput* request, ::PyRPC::ConversationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace PyRPC

