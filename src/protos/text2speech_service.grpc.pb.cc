// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: text2speech_service.proto

#include "text2speech_service.pb.h"
#include "text2speech_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Text2SpeechRPC {

static const char* Text2SpeechService_method_names[] = {
  "/Text2SpeechRPC.Text2SpeechService/TextToSpeech",
};

std::unique_ptr< Text2SpeechService::Stub> Text2SpeechService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Text2SpeechService::Stub> stub(new Text2SpeechService::Stub(channel));
  return stub;
}

Text2SpeechService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_TextToSpeech_(Text2SpeechService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Text2SpeechService::Stub::TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::Text2SpeechRPC::TTSOutput* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TextToSpeech_, context, request, response);
}

void Text2SpeechService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, std::move(f));
}

void Text2SpeechService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, std::move(f));
}

void Text2SpeechService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, reactor);
}

void Text2SpeechService::Stub::experimental_async::TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TextToSpeech_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>* Text2SpeechService::Stub::AsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Text2SpeechRPC::TTSOutput>::Create(channel_.get(), cq, rpcmethod_TextToSpeech_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>* Text2SpeechService::Stub::PrepareAsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Text2SpeechRPC::TTSOutput>::Create(channel_.get(), cq, rpcmethod_TextToSpeech_, context, request, false);
}

Text2SpeechService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Text2SpeechService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Text2SpeechService::Service, ::Text2SpeechRPC::TTSInput, ::Text2SpeechRPC::TTSOutput>(
          [](Text2SpeechService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Text2SpeechRPC::TTSInput* req,
             ::Text2SpeechRPC::TTSOutput* resp) {
               return service->TextToSpeech(ctx, req, resp);
             }, this)));
}

Text2SpeechService::Service::~Service() {
}

::grpc::Status Text2SpeechService::Service::TextToSpeech(::grpc::ServerContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Text2SpeechRPC

