// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: text2speech_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_text2speech_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_text2speech_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_text2speech_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_text2speech_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_text2speech_5fservice_2eproto;
namespace Text2SpeechRPC {
class TTSInput;
class TTSInputDefaultTypeInternal;
extern TTSInputDefaultTypeInternal _TTSInput_default_instance_;
class TTSOutput;
class TTSOutputDefaultTypeInternal;
extern TTSOutputDefaultTypeInternal _TTSOutput_default_instance_;
}  // namespace Text2SpeechRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::Text2SpeechRPC::TTSInput* Arena::CreateMaybeMessage<::Text2SpeechRPC::TTSInput>(Arena*);
template<> ::Text2SpeechRPC::TTSOutput* Arena::CreateMaybeMessage<::Text2SpeechRPC::TTSOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Text2SpeechRPC {

// ===================================================================

class TTSInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Text2SpeechRPC.TTSInput) */ {
 public:
  TTSInput();
  virtual ~TTSInput();

  TTSInput(const TTSInput& from);
  TTSInput(TTSInput&& from) noexcept
    : TTSInput() {
    *this = ::std::move(from);
  }

  inline TTSInput& operator=(const TTSInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTSInput& operator=(TTSInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTSInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TTSInput* internal_default_instance() {
    return reinterpret_cast<const TTSInput*>(
               &_TTSInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TTSInput& a, TTSInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TTSInput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTSInput* New() const final {
    return CreateMaybeMessage<TTSInput>(nullptr);
  }

  TTSInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTSInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTSInput& from);
  void MergeFrom(const TTSInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTSInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Text2SpeechRPC.TTSInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_text2speech_5fservice_2eproto);
    return ::descriptor_table_text2speech_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kLangFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string lang = 2;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // @@protoc_insertion_point(class_scope:Text2SpeechRPC.TTSInput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_text2speech_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TTSOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Text2SpeechRPC.TTSOutput) */ {
 public:
  TTSOutput();
  virtual ~TTSOutput();

  TTSOutput(const TTSOutput& from);
  TTSOutput(TTSOutput&& from) noexcept
    : TTSOutput() {
    *this = ::std::move(from);
  }

  inline TTSOutput& operator=(const TTSOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTSOutput& operator=(TTSOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTSOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TTSOutput* internal_default_instance() {
    return reinterpret_cast<const TTSOutput*>(
               &_TTSOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TTSOutput& a, TTSOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TTSOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTSOutput* New() const final {
    return CreateMaybeMessage<TTSOutput>(nullptr);
  }

  TTSOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTSOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTSOutput& from);
  void MergeFrom(const TTSOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTSOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Text2SpeechRPC.TTSOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_text2speech_5fservice_2eproto);
    return ::descriptor_table_text2speech_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:Text2SpeechRPC.TTSOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_text2speech_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TTSInput

// string text = 1;
inline void TTSInput::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TTSInput::text() const {
  // @@protoc_insertion_point(field_get:Text2SpeechRPC.TTSInput.text)
  return _internal_text();
}
inline void TTSInput::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Text2SpeechRPC.TTSInput.text)
}
inline std::string* TTSInput::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Text2SpeechRPC.TTSInput.text)
  return _internal_mutable_text();
}
inline const std::string& TTSInput::_internal_text() const {
  return text_.GetNoArena();
}
inline void TTSInput::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TTSInput::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Text2SpeechRPC.TTSInput.text)
}
inline void TTSInput::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Text2SpeechRPC.TTSInput.text)
}
inline void TTSInput::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Text2SpeechRPC.TTSInput.text)
}
inline std::string* TTSInput::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TTSInput::release_text() {
  // @@protoc_insertion_point(field_release:Text2SpeechRPC.TTSInput.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TTSInput::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Text2SpeechRPC.TTSInput.text)
}

// string lang = 2;
inline void TTSInput::clear_lang() {
  lang_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TTSInput::lang() const {
  // @@protoc_insertion_point(field_get:Text2SpeechRPC.TTSInput.lang)
  return _internal_lang();
}
inline void TTSInput::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:Text2SpeechRPC.TTSInput.lang)
}
inline std::string* TTSInput::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:Text2SpeechRPC.TTSInput.lang)
  return _internal_mutable_lang();
}
inline const std::string& TTSInput::_internal_lang() const {
  return lang_.GetNoArena();
}
inline void TTSInput::_internal_set_lang(const std::string& value) {
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TTSInput::set_lang(std::string&& value) {
  
  lang_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Text2SpeechRPC.TTSInput.lang)
}
inline void TTSInput::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Text2SpeechRPC.TTSInput.lang)
}
inline void TTSInput::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Text2SpeechRPC.TTSInput.lang)
}
inline std::string* TTSInput::_internal_mutable_lang() {
  
  return lang_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TTSInput::release_lang() {
  // @@protoc_insertion_point(field_release:Text2SpeechRPC.TTSInput.lang)
  
  return lang_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TTSInput::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:Text2SpeechRPC.TTSInput.lang)
}

// -------------------------------------------------------------------

// TTSOutput

// bytes data = 1;
inline void TTSOutput::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TTSOutput::data() const {
  // @@protoc_insertion_point(field_get:Text2SpeechRPC.TTSOutput.data)
  return _internal_data();
}
inline void TTSOutput::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Text2SpeechRPC.TTSOutput.data)
}
inline std::string* TTSOutput::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Text2SpeechRPC.TTSOutput.data)
  return _internal_mutable_data();
}
inline const std::string& TTSOutput::_internal_data() const {
  return data_.GetNoArena();
}
inline void TTSOutput::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TTSOutput::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Text2SpeechRPC.TTSOutput.data)
}
inline void TTSOutput::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Text2SpeechRPC.TTSOutput.data)
}
inline void TTSOutput::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Text2SpeechRPC.TTSOutput.data)
}
inline std::string* TTSOutput::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TTSOutput::release_data() {
  // @@protoc_insertion_point(field_release:Text2SpeechRPC.TTSOutput.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TTSOutput::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Text2SpeechRPC.TTSOutput.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Text2SpeechRPC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_text2speech_5fservice_2eproto
