// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: text2speech_service.proto

#include "text2speech_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Text2SpeechRPC {
class TTSInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTSInput> _instance;
} _TTSInput_default_instance_;
class TTSOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTSOutput> _instance;
} _TTSOutput_default_instance_;
}  // namespace Text2SpeechRPC
static void InitDefaultsscc_info_TTSInput_text2speech_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Text2SpeechRPC::_TTSInput_default_instance_;
    new (ptr) ::Text2SpeechRPC::TTSInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Text2SpeechRPC::TTSInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTSInput_text2speech_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TTSInput_text2speech_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_TTSOutput_text2speech_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Text2SpeechRPC::_TTSOutput_default_instance_;
    new (ptr) ::Text2SpeechRPC::TTSOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Text2SpeechRPC::TTSOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTSOutput_text2speech_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TTSOutput_text2speech_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_text2speech_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_text2speech_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_text2speech_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_text2speech_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Text2SpeechRPC::TTSInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Text2SpeechRPC::TTSInput, text_),
  PROTOBUF_FIELD_OFFSET(::Text2SpeechRPC::TTSInput, lang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Text2SpeechRPC::TTSOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Text2SpeechRPC::TTSOutput, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Text2SpeechRPC::TTSInput)},
  { 7, -1, sizeof(::Text2SpeechRPC::TTSOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Text2SpeechRPC::_TTSInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Text2SpeechRPC::_TTSOutput_default_instance_),
};

const char descriptor_table_protodef_text2speech_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031text2speech_service.proto\022\016Text2Speech"
  "RPC\"&\n\010TTSInput\022\014\n\004text\030\001 \001(\t\022\014\n\004lang\030\002 "
  "\001(\t\"\031\n\tTTSOutput\022\014\n\004data\030\001 \001(\0142Y\n\022Text2S"
  "peechService\022C\n\014TextToSpeech\022\030.Text2Spee"
  "chRPC.TTSInput\032\031.Text2SpeechRPC.TTSOutpu"
  "tB\006\242\002\003RTGb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_text2speech_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_text2speech_5fservice_2eproto_sccs[2] = {
  &scc_info_TTSInput_text2speech_5fservice_2eproto.base,
  &scc_info_TTSOutput_text2speech_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_text2speech_5fservice_2eproto_once;
static bool descriptor_table_text2speech_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_text2speech_5fservice_2eproto = {
  &descriptor_table_text2speech_5fservice_2eproto_initialized, descriptor_table_protodef_text2speech_5fservice_2eproto, "text2speech_service.proto", 217,
  &descriptor_table_text2speech_5fservice_2eproto_once, descriptor_table_text2speech_5fservice_2eproto_sccs, descriptor_table_text2speech_5fservice_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_text2speech_5fservice_2eproto::offsets,
  file_level_metadata_text2speech_5fservice_2eproto, 2, file_level_enum_descriptors_text2speech_5fservice_2eproto, file_level_service_descriptors_text2speech_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_text2speech_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_text2speech_5fservice_2eproto), true);
namespace Text2SpeechRPC {

// ===================================================================

void TTSInput::InitAsDefaultInstance() {
}
class TTSInput::_Internal {
 public:
};

TTSInput::TTSInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Text2SpeechRPC.TTSInput)
}
TTSInput::TTSInput(const TTSInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lang().empty()) {
    lang_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  // @@protoc_insertion_point(copy_constructor:Text2SpeechRPC.TTSInput)
}

void TTSInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTSInput_text2speech_5fservice_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TTSInput::~TTSInput() {
  // @@protoc_insertion_point(destructor:Text2SpeechRPC.TTSInput)
  SharedDtor();
}

void TTSInput::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TTSInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TTSInput& TTSInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTSInput_text2speech_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TTSInput::Clear() {
// @@protoc_insertion_point(message_clear_start:Text2SpeechRPC.TTSInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TTSInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Text2SpeechRPC.TTSInput.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Text2SpeechRPC.TTSInput.lang"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TTSInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Text2SpeechRPC.TTSInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Text2SpeechRPC.TTSInput.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // string lang = 2;
  if (this->lang().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Text2SpeechRPC.TTSInput.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Text2SpeechRPC.TTSInput)
  return target;
}

size_t TTSInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Text2SpeechRPC.TTSInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string lang = 2;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TTSInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Text2SpeechRPC.TTSInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TTSInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTSInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Text2SpeechRPC.TTSInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Text2SpeechRPC.TTSInput)
    MergeFrom(*source);
  }
}

void TTSInput::MergeFrom(const TTSInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Text2SpeechRPC.TTSInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
}

void TTSInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Text2SpeechRPC.TTSInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTSInput::CopyFrom(const TTSInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Text2SpeechRPC.TTSInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTSInput::IsInitialized() const {
  return true;
}

void TTSInput::InternalSwap(TTSInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TTSInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TTSOutput::InitAsDefaultInstance() {
}
class TTSOutput::_Internal {
 public:
};

TTSOutput::TTSOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Text2SpeechRPC.TTSOutput)
}
TTSOutput::TTSOutput(const TTSOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:Text2SpeechRPC.TTSOutput)
}

void TTSOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTSOutput_text2speech_5fservice_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TTSOutput::~TTSOutput() {
  // @@protoc_insertion_point(destructor:Text2SpeechRPC.TTSOutput)
  SharedDtor();
}

void TTSOutput::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TTSOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TTSOutput& TTSOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTSOutput_text2speech_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TTSOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:Text2SpeechRPC.TTSOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TTSOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TTSOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Text2SpeechRPC.TTSOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Text2SpeechRPC.TTSOutput)
  return target;
}

size_t TTSOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Text2SpeechRPC.TTSOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TTSOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Text2SpeechRPC.TTSOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const TTSOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTSOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Text2SpeechRPC.TTSOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Text2SpeechRPC.TTSOutput)
    MergeFrom(*source);
  }
}

void TTSOutput::MergeFrom(const TTSOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Text2SpeechRPC.TTSOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TTSOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Text2SpeechRPC.TTSOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTSOutput::CopyFrom(const TTSOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Text2SpeechRPC.TTSOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTSOutput::IsInitialized() const {
  return true;
}

void TTSOutput::InternalSwap(TTSOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TTSOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Text2SpeechRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Text2SpeechRPC::TTSInput* Arena::CreateMaybeMessage< ::Text2SpeechRPC::TTSInput >(Arena* arena) {
  return Arena::CreateInternal< ::Text2SpeechRPC::TTSInput >(arena);
}
template<> PROTOBUF_NOINLINE ::Text2SpeechRPC::TTSOutput* Arena::CreateMaybeMessage< ::Text2SpeechRPC::TTSOutput >(Arena* arena) {
  return Arena::CreateInternal< ::Text2SpeechRPC::TTSOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
