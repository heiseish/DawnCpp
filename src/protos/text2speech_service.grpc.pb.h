// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: text2speech_service.proto
#ifndef GRPC_text2speech_5fservice_2eproto__INCLUDED
#define GRPC_text2speech_5fservice_2eproto__INCLUDED

#include "text2speech_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Text2SpeechRPC {

class Text2SpeechService final {
 public:
  static constexpr char const* service_full_name() {
    return "Text2SpeechRPC.Text2SpeechService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::Text2SpeechRPC::TTSOutput* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Text2SpeechRPC::TTSOutput>> AsyncTextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Text2SpeechRPC::TTSOutput>>(AsyncTextToSpeechRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Text2SpeechRPC::TTSOutput>> PrepareAsyncTextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Text2SpeechRPC::TTSOutput>>(PrepareAsyncTextToSpeechRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Text2SpeechRPC::TTSOutput>* AsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Text2SpeechRPC::TTSOutput>* PrepareAsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::Text2SpeechRPC::TTSOutput* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>> AsyncTextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>>(AsyncTextToSpeechRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>> PrepareAsyncTextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>>(PrepareAsyncTextToSpeechRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, std::function<void(::grpc::Status)>) override;
      void TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TextToSpeech(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TextToSpeech(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Text2SpeechRPC::TTSOutput* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>* AsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Text2SpeechRPC::TTSOutput>* PrepareAsyncTextToSpeechRaw(::grpc::ClientContext* context, const ::Text2SpeechRPC::TTSInput& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TextToSpeech_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status TextToSpeech(::grpc::ServerContext* context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextToSpeech(::grpc::ServerContext* context, ::Text2SpeechRPC::TTSInput* request, ::grpc::ServerAsyncResponseWriter< ::Text2SpeechRPC::TTSOutput>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TextToSpeech<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TextToSpeech() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Text2SpeechRPC::TTSInput, ::Text2SpeechRPC::TTSOutput>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Text2SpeechRPC::TTSInput* request, ::Text2SpeechRPC::TTSOutput* response) { return this->TextToSpeech(context, request, response); }));}
    void SetMessageAllocatorFor_TextToSpeech(
        ::grpc::experimental::MessageAllocator< ::Text2SpeechRPC::TTSInput, ::Text2SpeechRPC::TTSOutput>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Text2SpeechRPC::TTSInput, ::Text2SpeechRPC::TTSOutput>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TextToSpeech(
      ::grpc::CallbackServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TextToSpeech(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_TextToSpeech<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_TextToSpeech<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextToSpeech(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TextToSpeech() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TextToSpeech(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TextToSpeech(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TextToSpeech(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TextToSpeech : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TextToSpeech() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Text2SpeechRPC::TTSInput, ::Text2SpeechRPC::TTSOutput>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Text2SpeechRPC::TTSInput, ::Text2SpeechRPC::TTSOutput>* streamer) {
                       return this->StreamedTextToSpeech(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TextToSpeech() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TextToSpeech(::grpc::ServerContext* /*context*/, const ::Text2SpeechRPC::TTSInput* /*request*/, ::Text2SpeechRPC::TTSOutput* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTextToSpeech(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Text2SpeechRPC::TTSInput,::Text2SpeechRPC::TTSOutput>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TextToSpeech<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TextToSpeech<Service > StreamedService;
};

}  // namespace Text2SpeechRPC


#endif  // GRPC_text2speech_5fservice_2eproto__INCLUDED
