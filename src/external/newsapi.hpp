#pragma once

#ifndef EXTERNAL_NEWSAPI_H
#define EXTERNAL_NEWSAPI_H

#include <curl/curl.h>
#include <iostream>
#include <random>
#include <string>
#include <vector>
#include "utility/list/shuffle.hpp"
#include "utility/network/request.hpp"

namespace Dawn::External {

class NewsAPIArticle {
public:
    NewsAPIArticle(const std::string& param_title,
                   const std::string& param_author,
                   const std::string& param_url,
                   const std::string& param_urlToImage)
        : title(param_title),
          author(param_author),
          url(param_url),
          urlToImage(param_urlToImage) {}

    NewsAPIArticle(NewsAPIArticle&& other)
        : title(std::move(other.title)),
          author(std::move(other.author)),
          url(std::move(other.url)),
          urlToImage(std::move(other.urlToImage)) {}

    NewsAPIArticle& operator=(NewsAPIArticle&& other) {
        if (this != &other) {
            title = std::move(other.title);
            author = std::move(other.author);
            url = std::move(other.url);
            urlToImage = std::move(other.urlToImage);
        }
        return *this;
    }
    std::string title;
    std::string author;
    std::string url;
    std::string urlToImage;
};

class NewsAPI {
public:
    NewsAPI(const std::string& api_key,
            const std::string& sources =
                "bbc-news,the-verge,bbc-sport,bloomberg,business-insider,"
                "business-insider-uk,cnn,espn,google-news,mtv-news,the-new-"
                "york-times,the-washington-post");
    ~NewsAPI();

    /**
     * @brief Get top headlines generated by news-api.
     * Prune the list to `limit` size if `limit` is provided.
     * Shuffle the list before pruning if `shuffle` is set to true
     * @arg limit number of articles to be returned
     * @arg shuffle whether to shuffle the article list
     * @return list of articles of `min(limit, all_articles.size())` size
     */
    std::vector<NewsAPIArticle> TopHeadlines(const std::string& query = "",
                                             const unsigned long& limit = 5,
                                             const bool& shuffle = true) const;

private:
    std::string _api_key;
    Utility::Requester _request;
    std::string _sources;
};

}  // namespace Dawn::External

#endif